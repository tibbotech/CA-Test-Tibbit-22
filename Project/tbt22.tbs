'***********************************************************************************************************
'			Tibbit #22 Temperature Sensor (RTD-to-Digital Converter)
'***********************************************************************************************************

include "global.tbh"

'--------------------------------------------------------------------
const TBT_RTD_INIT_SIGNATURE=&hB22A
const TBT_RTD_STAMP="TBTRTD> "
const TBT_RTD_CR_LF=chr(13)+chr(10)

'TBT_RTD Co-processor Address
const TBT22_RTD_CODE_W=&h1A
const TBT22_RTD_CODE_R=&h1B

'TBT22 Co-processor Command
const TBT22_RTD_CMD_READ=&h1
const TBT22_RTD_CMD_WRITE=&h2
const TBT22_RTD_CMD_FW_VER=&h3


'TBT22 RTD register address
enum tbt22_rtd_reg_write_addr
	W_REG_ADDR_CONFIGURATION=&h80,
	W_REG_ADDR_HIGH_FAULT_THRESHOLD_MSB=&h83,
	W_REG_ADDR_HIGH_FAULT_THRESHOLD_LSB=&h84,
	W_REG_ADDR_LOW_FAULT_THRESHOLD_MSB=&h85,
	W_REG_ADDR_LOW_FAULT_THRESHOLD_LSB=&h86
end enum

'--------------------------------------------------------------------
'Co-processor utility functions for register access ...
declare sub tbt22_rtd_read_all(byref config as byte, byref rtd as word, byref hi_fault as word, byref lo_fault as word, byref fault as byte, int_pin as byte, tbt_channel as byte)
declare sub tbt22_rtd_reg_write(addr as tbt22_rtd_reg_write_addr, data as byte, int_pin as byte, tbt_channel as byte)
'declare sub tbt22_rtd_delay_in_ms(value as word)

#if TBT_RTD_DEBUG_PRINT=1
	declare sub rtd_debug_print(data as string)
#endif

'--------------------------------------------------------------------
dim tbt22_list as tbt22_type
dim tbt22_start_called as boolean=false
'==================================================================================================

sub tbt22_start()
	dim b as byte
	for b=0 to TBT22_MAX_NUM_OF_SOCKS-1
		tbt22_list.channel(b)=255
	next b
end sub

function tbt_rtd_init(signature as string, data_pin as byte, clk_pin as byte, int_pin as byte, byref tbt_channel as byte, use_ssi as no_yes)as ok_ng
'Call this function to initialize the Tibbit.
'Use_ssi argument specifies whether you want to communicate with this Tibbit using the SSI channel running in the I2C mode (YES), or
'go for direct I/O manipulation a.k.a. bit-banging (NO).
'Note that there is a limited number of SSI channels so if you set use_ssi=YES this function may return NG, meaning that
'there are no free SSI channels left. This doesn't mean failure. Rather, it means that comms will proceed in bit banging mood.
	
	if tbt22_start_called=false then
		tbt22_start()
		tbt22_start_called=true
	end if
	tbt_rtd_init = OK

	#if TBT_RTD_DEBUG_PRINT = 1
		rtd_debug_print("++++++++++")
	#endif
	
	tbt_channel=si2c_register(signature, data_pin, clk_pin, use_ssi)
	
	dim b as byte
	dim tbt22_sockets_full as no_yes = YES
	for b=0 to TBT22_MAX_NUM_OF_SOCKS-1
		if tbt22_list.rtd_init_flag(b) <> TBT_RTD_INIT_SIGNATURE then
			tbt22_list.channel(b) = tbt_channel
			tbt22_list.rtd_init_flag(b) = TBT_RTD_INIT_SIGNATURE
			tbt22_sockets_full = NO
			exit for
		end if
	next b
	
	if tbt22_sockets_full = YES then
		sys.debugprint("Increase TBT22_MAX_NUM_OF_SOCKS")
	end if
	
	#if TBT_RTD_DEBUG_PRINT=1
		rtd_debug_print("i2c num:" + str(tbt_channel))
	#endif
	if tbt_channel<4 then
		ssi.channel = tbt_channel
		ssi.enabled = NO
#if PLATFORM_TYPE_32
		ssi.baudrate = 150
#else
		ssi.baudrate = 50
#endif
		ssi.clkmap = clk_pin
		ssi.dimap = data_pin
		ssi.domap = data_pin
		ssi.zmode = PL_SSI_ZMODE_ENABLED_ON_ZERO
		ssi.direction = PL_SSI_DIRECTION_LEFT
		ssi.mode = PL_SSI_MODE_2
		ssi.enabled = YES
		io.num = clk_pin
		io.enabled = YES
		io.state = HIGH
		io.num = data_pin
		io.enabled = NO
		io.state = HIGH
	else
		if use_ssi = YES then
			tbt_rtd_init = NG
		end if
	end if

	io.num = int_pin
	io.enabled = NO

	#if TBT_RTD_DEBUG_PRINT = 1
		rtd_debug_print("----------")
	#endif
end function

sub tbt22_rtd_read_all(byref config as byte, byref rtd as word, byref hi_fault as word, byref lo_fault as word, byref fault as byte, int_pin as byte, tbt_channel as byte)
	dim tmp as byte=0

	si2c_get(tbt_channel)

	si2c_start()
	si2c_write(TBT22_RTD_CODE_W)
	si2c_write(TBT22_RTD_CMD_READ)
	si2c_stop()


	si2c_start()
	si2c_write(TBT22_RTD_CODE_R)

	'wait pic co-processor to fetch the data ...
	while (io.lineget(int_pin) = LOW)
	wend

	config = si2c_read(true)			'byte 0
	tmp = si2c_read(true)				'byte 1
	rtd = tmp * 256 + si2c_read(true)	'byte 2
	tmp = si2c_read(true)				'byte 3
	hi_fault = tmp * 256 + si2c_read(true)'byte 4
	tmp = si2c_read(true)				'byte 5
	lo_fault = tmp * 256 + si2c_read(true)'byte 6
	fault = si2c_read(false)			'byte 7
	si2c_stop()
	while (io.lineget(int_pin) = LOW)
	wend
end sub

sub tbt22_rtd_reg_write(addr as tbt22_rtd_reg_write_addr, data as byte, int_pin as byte, tbt_channel as byte)
	dim tmr as dword
	si2c_get(tbt_channel)

	si2c_start()
	si2c_write(TBT22_RTD_CODE_W)
	si2c_write(TBT22_RTD_CMD_WRITE)
	si2c_write(addr)
	si2c_write(data)
	si2c_stop()
	while (io.lineget(int_pin) = LOW)
	wend
end sub

function tbt22_get_index(tbt_channel as byte) as byte
	dim b as byte
	for b=0 to TBT22_MAX_NUM_OF_SOCKS-1
		if tbt_channel=tbt22_list.channel(b) then
			tbt22_get_index=b
			exit function
		end if
	next b
	b=255
	sys.debugprint("Channel not found\r\n")
end function

'function tbt22_rtd_config(mode as rtd_conv_mode, byref status as byte, r_in_normal_0_degree_C as real)as ok_ng
function tbt22_rtd_config(mode as rtd_conv_mode, sensor as rtd_sensor_type, int_pin as byte, tbt_channel as byte)as ok_ng
	dim tmp,count as byte = 0
	dim index as byte = tbt22_get_index(tbt_channel)
 	
	tbt22_rtd_config  = NG
	if tbt22_list.rtd_init_flag(index) <> TBT_RTD_INIT_SIGNATURE then
		#if TBT_RTD_DEBUG_PRINT = 1
			rtd_debug_print("leave, without initialize ")
		#endif
		exit function
	end if

	#if TBT_RTD_DEBUG_PRINT = 1
		if mode = tbt22_conversion_with_50_hz_mode then
			rtd_debug_print("50 Hz mode")
		else
			rtd_debug_print("60 Hz mode")
		end if
	#endif

	tbt22_rtd_reg_write(W_REG_ADDR_CONFIGURATION,&h0,int_pin,tbt_channel)

	tbt22_rtd_reg_write(W_REG_ADDR_LOW_FAULT_THRESHOLD_MSB,0,int_pin,tbt_channel)

	tbt22_rtd_reg_write(W_REG_ADDR_LOW_FAULT_THRESHOLD_LSB,0,int_pin,tbt_channel)

	tbt22_rtd_reg_write(W_REG_ADDR_HIGH_FAULT_THRESHOLD_MSB,&hFF,int_pin,tbt_channel)

	tbt22_rtd_reg_write(W_REG_ADDR_HIGH_FAULT_THRESHOLD_LSB,&hFF,int_pin,tbt_channel)

config_write:
	if mode = tbt22_conversion_with_50_hz_mode then
		tmp = &hC3
	else if mode = tbt22_conversion_with_60_hz_mode then
		tmp = &hC2
	end if
	tbt22_rtd_reg_write(W_REG_ADDR_CONFIGURATION,tmp,int_pin,tbt_channel)

	select case sensor
	case PT100:
	#if TBT_RTD_DEBUG_PRINT = 1
		rtd_debug_print("Sensor Type: PT100")
	#endif
		tbt22_list.tbt22_normal_0_resistance(index) = 100.0 

	case PT200:
	#if TBT_RTD_DEBUG_PRINT = 1
		rtd_debug_print("Sensor Type: PT200")
	#endif
		tbt22_list.tbt22_normal_0_resistance(index) = 200.0
		
	case PT500:
	#if TBT_RTD_DEBUG_PRINT = 1
		rtd_debug_print("Sensor Type: PT500")
	#endif
		tbt22_list.tbt22_normal_0_resistance(index) = 500.0
	
	case PT1000:
	#if TBT_RTD_DEBUG_PRINT = 1
		rtd_debug_print("Sensor Type: PT1000")
	#endif
		tbt22_list.tbt22_normal_0_resistance(index) = 1000.0

	case else:
	#if TBT_RTD_DEBUG_PRINT = 1
		rtd_debug_print("do not support this sensor")
	#endif
		exit function
	end select

	tbt22_rtd_config = OK
end function

function tbt22_rtd_get_temperature(byref data as real, byref fault_detect as byte, byref fault_status as byte, int_pin as byte, tbt_channel as byte)as ok_ng
	dim i,j as byte
	dim r , hi , lo as word
	dim index as byte = tbt22_get_index(tbt_channel)
 
	tbt22_rtd_get_temperature = NG
	data = 0
	fault_detect = 0
	fault_status = 0

	if tbt22_list.rtd_init_flag(index) <> TBT_RTD_INIT_SIGNATURE then
		#if TBT_RTD_DEBUG_PRINT = 1
			rtd_debug_print("leave, without initialize ")
		#endif
		exit function
	end if	

#if TBT_RTD_DEBUG_PRINT = 1
	rtd_debug_print("+++Get Temperature+++")
#endif

	tbt22_rtd_read_all(i, r, hi, lo, j, int_pin, tbt_channel)
#if TBT_RTD_DEBUG_PRINT = 1
	rtd_debug_print(hex(i) + "/" + hex(r) + "/" + hex(hi) + "/" + hex(lo) + "/" + hex(j))
#endif

	fault_detect = i and &h0C
	fault_status = j	

	'D0 of the RTD LSBs register is a Fault bit that indicates whether any RTD faults have been detected.
	if r and &h1 then
		data = hi * 256 + lo
		exit function
	end if
	r = r / 2

leave_with_ok:
	tbt22_rtd_get_temperature=OK
	'The Callendar-Van Dusen equation is commonly used to approximate the RTD curve :
	'
	'	R(T) = R0[1 + aT + bT^2 + c(T - 100)T^3]
	'
	'For more information on measuring with an RTD, ref:
	'
	'	http://newton.ex.ac.uk/teaching/CDHW/Sensors/an046.pdf

	dim a2,b_sq,rtd_resistance,c,d,rtd_rref,resistance as real

	rtd_rref = 4000.0


	a2 = 2.0 * RTD_B
	b_sq = RTD_A * RTD_A

	rtd_resistance = tbt22_list.tbt22_normal_0_resistance(index)
	resistance = r * rtd_rref/32768.0

#if TBT_RTD_DEBUG_PRINT = 1
	rtd_debug_print(ftostr(resistance,FTOSTR_MODE_AUTO,7)+" ohms")
	rtd_debug_print("---Get Temperature---")
#endif

	c = 1.0 - (resistance/rtd_resistance)
	d = b_sq - 2.0 * a2 * c

	data = sqrt(d)
	data = (-RTD_A + data)/a2
end function

sub tbt22_rtd_release(tbt_channel as byte)
	dim index as byte = tbt22_get_index(tbt_channel)
	if tbt22_list.rtd_init_flag(index) <> TBT_RTD_INIT_SIGNATURE then exit sub
	tbt22_list.rtd_init_flag(index) = &hFFFF
	si2c_release(tbt_channel)
end sub

function tbt22_rtd_fw_version(tbt_channel as byte)as string
	dim i as byte = 0
	dim s as string = ""
	dim index as byte = tbt22_get_index(tbt_channel)
	
	if tbt22_list.rtd_init_flag(index) <> TBT_RTD_INIT_SIGNATURE then
		#if TBT_RTD_DEBUG_PRINT = 1
			rtd_debug_print("leave, without initialize ")
		#endif
		exit function
	end if

	si2c_get(tbt_channel)

	s=""
	si2c_start()
	si2c_write(TBT22_RTD_CODE_W)
	si2c_write(TBT22_RTD_CMD_FW_VER)
	si2c_stop()
	si2c_start()
	si2c_write(TBT22_RTD_CODE_R)
	for i = 0 to 14
		s = s + chr(si2c_read(TRUE))
	next i
	s = s + chr(si2c_read(FALSE))
	si2c_stop()

	tbt22_rtd_fw_version = s
end function

#if TBT_RTD_DEBUG_PRINT = 1
sub rtd_debug_print(data as string)
	sys.debugprint(TBT_RTD_STAMP + data + TBT_RTD_CR_LF)
end sub
#endif
